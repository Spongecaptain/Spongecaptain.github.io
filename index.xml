<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spongecaptain 的个人技术博客</title>
    <link>https://spongecaptain.cool/</link>
    <description>Recent content on Spongecaptain 的个人技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Jul 2020 00:02:06 +0800</lastBuildDate>
    
	<atom:link href="https://spongecaptain.cool/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>跳表-skip list</title>
      <link>https://spongecaptain.cool/post/datastracture/skiplist/</link>
      <pubDate>Tue, 04 Aug 2020 16:11:01 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/datastracture/skiplist/</guid>
      <description>跳表作为一种数据结构，由 William Pugh 在其 1990 年发表的论文 Skip Lists: A Probabilistic Alternative to Balanced Trees 中提出。 1. 逻辑上的跳表 将跳表称为跳跃查询的链表更合适。 无论采用哪一种数据结构，</description>
    </item>
    
    <item>
      <title>MapReduce 论文学习</title>
      <link>https://spongecaptain.cool/post/paper/mapreduce_paper_read_summary/</link>
      <pubDate>Mon, 27 Jul 2020 22:45:21 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/paper/mapreduce_paper_read_summary/</guid>
      <description>MapReduce 论文学习 不少人说，最近 20 年互联网技术的发展就是其他公司学习谷歌的过程，MapReduce: Simpliﬁed Data Processing on Large Clusters 论文是 Google 开源后影响深</description>
    </item>
    
    <item>
      <title>AspectJ 动态代理的实际演练</title>
      <link>https://spongecaptain.cool/post/java/aspectjproxy/</link>
      <pubDate>Wed, 22 Jul 2020 21:03:57 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/aspectjproxy/</guid>
      <description>AspectJ 动态代理的实际演练 1. AOP 的概念引入 AspectJ 从其命名就可以看出其强调面向切面编程，什么是面向切面编程？ Aspect Oriented Programming（AOP），俗称面向</description>
    </item>
    
    <item>
      <title>CGLIB 动态代理的实际演练</title>
      <link>https://spongecaptain.cool/post/java/cglibproxy/</link>
      <pubDate>Wed, 22 Jul 2020 21:03:45 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/cglibproxy/</guid>
      <description>#CGLIB 动态代理的实际演练 JDK 动态代理技术最大的问题就在于其必须要求接口参与，即不是接口的方法无法进行动态代理。CGLIB 动态代理技术解决了这个问题</description>
    </item>
    
    <item>
      <title>Java 的代理模式的实现</title>
      <link>https://spongecaptain.cool/post/java/proxypattern/</link>
      <pubDate>Wed, 22 Jul 2020 20:56:48 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/proxypattern/</guid>
      <description>关于 Java 的代理技术，我写了一个开源库，推荐对具体实现有兴趣的同学去看看： https://github.com/Spongecaptain/ProxyPatternInJava 1. 为类的方法添加第三方功能-朴素方式 这里提到的第三方功能类似于软件的</description>
    </item>
    
    <item>
      <title>Java 反射小总结</title>
      <link>https://spongecaptain.cool/post/java/refelectionsummary/</link>
      <pubDate>Fri, 17 Jul 2020 23:24:19 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/refelectionsummary/</guid>
      <description>Java 反射小总结 1. Java 反射能做什么？ Java 反射：在运行状态中，能够任意一个类的所有属性和方法，能够调用任意一个对象的的方法和属性； Java &amp;ldquo;正射</description>
    </item>
    
    <item>
      <title>窥探 MySQL 索引</title>
      <link>https://spongecaptain.cool/post/mysql/mysqlindexsummary/</link>
      <pubDate>Fri, 10 Jul 2020 23:11:12 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/mysql/mysqlindexsummary/</guid>
      <description>MySQL 索引 1. 什么是数据库索引 在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。 索引是关系数据库中</description>
    </item>
    
    <item>
      <title>Hugo 博客搭建指北</title>
      <link>https://spongecaptain.cool/post/hugo/howtousehugo/</link>
      <pubDate>Tue, 07 Jul 2020 11:53:47 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/hugo/howtousehugo/</guid>
      <description>Hugo 博客搭建指北 自己曾经搭建过基于 Hexo 的博客，由于诸多原因弃之，在此启用 Hugo 作为静态博客。 1. 安装 Hugo 1 2 brew install hugo # 安装 Hugo hugo version # 安装版本查询，成功则说明</description>
    </item>
    
    <item>
      <title></title>
      <link>https://spongecaptain.cool/about/</link>
      <pubDate>Tue, 07 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/about/</guid>
      <description>About Me _______..______ ______ .__ __. _______ _______ / || _ \ / __ \ | \ | | / _____|| ____| | (----`| |_) | | | | | | \| | | | __ | |__ \ \ | ___/ | | | | | . ` | | | |_ | | __| .----) | | | | `--&#39; | | |\ | | |__| | |</description>
    </item>
    
  </channel>
</rss>