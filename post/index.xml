<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Spongecaptain 的个人技术博客</title>
    <link>https://spongecaptain.cool/post/</link>
    <description>Recent content in Posts on Spongecaptain 的个人技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Nov 2020 21:38:28 +0800</lastBuildDate>
    
	<atom:link href="https://spongecaptain.cool/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 并发包的设计框架</title>
      <link>https://spongecaptain.cool/post/java/frameworkofjuc/</link>
      <pubDate>Tue, 10 Nov 2020 21:38:28 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/frameworkofjuc/</guid>
      <description>1. Java concurrent 包概述 在针对并发编程中，Doug Lea 大师为我们提供了大量实用，高性能的工具类，针对这些代码进行研究会让我们队并发编程的掌握更加透彻也会大</description>
    </item>
    
    <item>
      <title>Spring XML schema 扩展机制</title>
      <link>https://spongecaptain.cool/post/spring/spring_xml_schema/</link>
      <pubDate>Thu, 29 Oct 2020 22:17:32 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/spring/spring_xml_schema/</guid>
      <description>1. 基于 Spring 容器的 Dubbo Dubbo 采用 Spring 的方式进行组件的管理，支持 XML 以及注解式的配置。在使用时，我们仅仅需要通过 beanName 向 IoC 容器索要组件，IoC 容器就能够返回封装</description>
    </item>
    
    <item>
      <title>人工智能的魔力-AI 真的有如此大的价值吗？</title>
      <link>https://spongecaptain.cool/post/life/thevalueofaitocompany/</link>
      <pubDate>Sun, 25 Oct 2020 15:18:00 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/life/thevalueofaitocompany/</guid>
      <description>我为什么会写这篇文章？ 我的人工智能水平局限于看过周志华的西瓜书，甚至连书本的基础知识都还没有掌握完全。万幸，我至少知道 AI 是怎么一回事。 另一方</description>
    </item>
    
    <item>
      <title>Netty 如何实现自己的解码器与解码器</title>
      <link>https://spongecaptain.cool/post/netty/howtowriteadecoderandencoder/</link>
      <pubDate>Sat, 24 Oct 2020 22:11:20 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/netty/howtowriteadecoderandencoder/</guid>
      <description>Netty 如何实现自己的解码器与解码器 建议首先理解 Netty 的 ChannelPipeline 管道执行模型。 本文的部分代码案例来自于如下开源项目：https://github.com/S</description>
    </item>
    
    <item>
      <title>在实验室服务器部署 GitLab</title>
      <link>https://spongecaptain.cool/post/life/deploygitlab/</link>
      <pubDate>Fri, 02 Oct 2020 20:59:57 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/life/deploygitlab/</guid>
      <description>在实验室服务器部署 GitLab 1. 起因 我为什么觉得实验室代码管理很重要？ 我是北京邮电大学的一名研究生，所处实验室在代码开发上的人数有 10 人左右（主要是部分</description>
    </item>
    
    <item>
      <title>Java 网络编程</title>
      <link>https://spongecaptain.cool/post/java/javanet/</link>
      <pubDate>Sun, 13 Sep 2020 22:14:03 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/javanet/</guid>
      <description>Java 网络编程 Java 网络编程大致可以分为三类： 基于 OIO 的阻塞 Socket 与 ServerSocket 编程模型； 基于 NIO 的非阻塞 SocketChannel 与 ServerSocketChannel 编程模型； 对于 JDK NIO 进行二次封装的非阻塞编程框架：Net</description>
    </item>
    
    <item>
      <title>ZooKeeper Watch 机制源码解析</title>
      <link>https://spongecaptain.cool/post/zookeeper/zookeeperwatch/</link>
      <pubDate>Thu, 10 Sep 2020 20:07:03 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/zookeeper/zookeeperwatch/</guid>
      <description>1. ZooKeeper Watch 概述 ZooKeeper Watch 机制类似于 Java 设计模式中的观察者模式或者监听模式，唯一的不同是不再基于线程间通信，而是基于进程间通信。 ZooKeeper Watch 机制是指，客户端在所有</description>
    </item>
    
    <item>
      <title>ZooKeeper 服务端线程分析</title>
      <link>https://spongecaptain.cool/post/zookeeper/zookeeperserverthreadmodel/</link>
      <pubDate>Sun, 06 Sep 2020 22:25:56 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/zookeeper/zookeeperserverthreadmodel/</guid>
      <description>我对 ZooKeeper release-3.6.1 的源码分析地址为：https://github.com/Spongecaptain/zookeeper Enjoy the Source Code. :) 1. 为什么从线程分析入</description>
    </item>
    
    <item>
      <title>ZooKeeper 的个人理解与总结</title>
      <link>https://spongecaptain.cool/post/zookeeper/myunderstandingofzookeeper/</link>
      <pubDate>Tue, 25 Aug 2020 19:56:06 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/zookeeper/myunderstandingofzookeeper/</guid>
      <description>1. ZAB 协议的核心是什么？ 其次，如果不考虑 Zookeeper 基于分布式共识算法的实现细节，我们可以将 Zookeeper 理解为文件系统 + 监听通知机制。 Zookeeper = 文件系统 + 监听通知机制 Zookeeper</description>
    </item>
    
    <item>
      <title>Bigtable 论文阅读</title>
      <link>https://spongecaptain.cool/post/paper/bigtable/</link>
      <pubDate>Fri, 14 Aug 2020 12:20:10 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/paper/bigtable/</guid>
      <description>1. Bigtable 是什么？ Bigtable 是一种压缩的、高性能的、高可扩展性的，基于 Google 文件系统（Google File System，GFS）的数据存储系统，用于存储大规模结构化</description>
    </item>
    
    <item>
      <title>Google File System-GFS 论文阅读</title>
      <link>https://spongecaptain.cool/post/paper/googlefilesystem/</link>
      <pubDate>Wed, 05 Aug 2020 10:56:59 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/paper/googlefilesystem/</guid>
      <description>1. GFS 是什么？ Google 文件系统（Google File System，缩写为 GFS 或 GoogleFS），一种专有分布式文件系统，由 Google 公司开发，运行于 Linux 平台上。尽管</description>
    </item>
    
    <item>
      <title>跳表-skip list</title>
      <link>https://spongecaptain.cool/post/datastracture/skiplist/</link>
      <pubDate>Tue, 04 Aug 2020 16:11:01 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/datastracture/skiplist/</guid>
      <description>跳表作为一种数据结构，由 William Pugh 在其 1990 年发表的论文 Skip Lists: A Probabilistic Alternative to Balanced Trees 中提出。 1. 逻辑上的跳表 将跳表称为跳跃查询的链表更合适。 无论采用哪一种数据结构，</description>
    </item>
    
    <item>
      <title>MapReduce 论文学习</title>
      <link>https://spongecaptain.cool/post/paper/mapreduce/</link>
      <pubDate>Mon, 27 Jul 2020 22:45:21 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/paper/mapreduce/</guid>
      <description>MapReduce 论文学习 不少人说，最近 20 年互联网技术的发展就是其他公司学习谷歌的过程，MapReduce: Simpliﬁed Data Processing on Large Clusters 论文是 Google 开源后影响深</description>
    </item>
    
    <item>
      <title>AspectJ 动态代理的实际演练</title>
      <link>https://spongecaptain.cool/post/java/aspectjproxy/</link>
      <pubDate>Wed, 22 Jul 2020 21:03:57 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/aspectjproxy/</guid>
      <description>AspectJ 动态代理的实际演练 1. AOP 的概念引入 AspectJ 从其命名就可以看出其强调面向切面编程，什么是面向切面编程？ Aspect Oriented Programming（AOP），俗称面向</description>
    </item>
    
    <item>
      <title>CGLIB 动态代理的实际演练</title>
      <link>https://spongecaptain.cool/post/java/cglibproxy/</link>
      <pubDate>Wed, 22 Jul 2020 21:03:45 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/cglibproxy/</guid>
      <description>#CGLIB 动态代理的实际演练 JDK 动态代理技术最大的问题就在于其必须要求接口参与，即不是接口的方法无法进行动态代理。CGLIB 动态代理技术解决了这个问题</description>
    </item>
    
    <item>
      <title>Java 的代理模式的实现</title>
      <link>https://spongecaptain.cool/post/java/proxypattern/</link>
      <pubDate>Wed, 22 Jul 2020 20:56:48 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/proxypattern/</guid>
      <description>关于 Java 的代理技术，我写了一个开源库，推荐对具体实现有兴趣的同学去看看： https://github.com/Spongecaptain/ProxyPatternInJava 1. 为类的方法添加第三方功能-朴素方式 这里提到的第三方功能类似于软件的</description>
    </item>
    
    <item>
      <title>Java 反射小总结</title>
      <link>https://spongecaptain.cool/post/java/refelectionsummary/</link>
      <pubDate>Fri, 17 Jul 2020 23:24:19 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/refelectionsummary/</guid>
      <description>Java 反射小总结 1. Java 反射能做什么？ Java 反射：在运行状态中，能够任意一个类的所有属性和方法，能够调用任意一个对象的的方法和属性； Java &amp;ldquo;正射</description>
    </item>
    
    <item>
      <title>窥探 MySQL 索引</title>
      <link>https://spongecaptain.cool/post/mysql/mysqlindexsummary/</link>
      <pubDate>Fri, 10 Jul 2020 23:11:12 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/mysql/mysqlindexsummary/</guid>
      <description>MySQL 索引 1. 什么是数据库索引 在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。 索引是关系数据库中</description>
    </item>
    
    <item>
      <title>Hugo 博客搭建指北</title>
      <link>https://spongecaptain.cool/post/hugo/howtousehugo/</link>
      <pubDate>Tue, 07 Jul 2020 11:53:47 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/hugo/howtousehugo/</guid>
      <description>Hugo 博客搭建指北 自己曾经搭建过基于 Hexo 的博客，由于诸多原因弃之，在此启用 Hugo 作为静态博客。 1. 安装 Hugo 1 2 brew install hugo # 安装 Hugo hugo version # 安装版本查询，成功则说明</description>
    </item>
    
  </channel>
</rss>